// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.9.0.

// ignore_for_file: unused_import, unused_element, unnecessary_import, duplicate_ignore, invalid_use_of_internal_member, annotate_overrides, non_constant_identifier_names, curly_braces_in_flow_control_structures, prefer_const_literals_to_create_immutables, unused_field

import 'bindings/ffi.dart';
import 'dart:async';
import 'dart:convert';
import 'frb_generated.dart';
import 'frb_generated.io.dart'
    if (dart.library.js_interop) 'frb_generated.web.dart';
import 'lib.dart';
import 'models/notification.dart';
import 'models/profile.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';
import 'services/auth.dart';

/// Main entrypoint of the Rust API
class RustLib extends BaseEntrypoint<RustLibApi, RustLibApiImpl, RustLibWire> {
  @internal
  static final instance = RustLib._();

  RustLib._();

  /// Initialize flutter_rust_bridge
  static Future<void> init({
    RustLibApi? api,
    BaseHandler? handler,
    ExternalLibrary? externalLibrary,
  }) async {
    await instance.initImpl(
      api: api,
      handler: handler,
      externalLibrary: externalLibrary,
    );
  }

  /// Initialize flutter_rust_bridge in mock mode.
  /// No libraries for FFI are loaded.
  static void initMock({required RustLibApi api}) {
    instance.initMockImpl(api: api);
  }

  /// Dispose flutter_rust_bridge
  ///
  /// The call to this function is optional, since flutter_rust_bridge (and everything else)
  /// is automatically disposed when the app stops.
  static void dispose() => instance.disposeImpl();

  @override
  ApiImplConstructor<RustLibApiImpl, RustLibWire> get apiImplConstructor =>
      RustLibApiImpl.new;

  @override
  WireConstructor<RustLibWire> get wireConstructor =>
      RustLibWire.fromExternalLibrary;

  @override
  Future<void> executeRustInitializers() async {
    await api.crateBindingsFfiInitApp();
  }

  @override
  ExternalLibraryLoaderConfig get defaultExternalLibraryLoaderConfig =>
      kDefaultExternalLibraryLoaderConfig;

  @override
  String get codegenVersion => '2.9.0';

  @override
  int get rustContentHash => 887733343;

  static const kDefaultExternalLibraryLoaderConfig =
      ExternalLibraryLoaderConfig(
        stem: 'rust_lib_dummy_cross',
        ioDirectory: 'rust/target/release/',
        webPrefix: 'pkg/',
      );
}

abstract class RustLibApi extends BaseApi {
  Future<void> crateBindingsFfiFfiApiClientDeleteAccount({
    required FfiApiClient that,
  });

  Future<Profile> crateBindingsFfiFfiApiClientDeleteCoverPhoto({
    required FfiApiClient that,
  });

  Future<void> crateBindingsFfiFfiApiClientDeleteNotification({
    required FfiApiClient that,
    required int notificationId,
  });

  Future<Profile> crateBindingsFfiFfiApiClientDeleteProfilePicture({
    required FfiApiClient that,
  });

  Future<Profile> crateBindingsFfiFfiApiClientDeleteResume({
    required FfiApiClient that,
  });

  Future<void> crateBindingsFfiFfiApiClientForgetPassword({
    required FfiApiClient that,
    required String email,
  });

  String crateBindingsFfiFfiApiClientGetAuthToken({required FfiApiClient that});

  Future<String> crateBindingsFfiFfiApiClientGetGatewayHealth({
    required FfiApiClient that,
  });

  Future<Profile> crateBindingsFfiFfiApiClientGetLocalUserProfile({
    required FfiApiClient that,
  });

  Future<List<Notification>> crateBindingsFfiFfiApiClientGetNotifications({
    required FfiApiClient that,
    int? page,
  });

  Future<LoginResponse> crateBindingsFfiFfiApiClientLogin({
    required FfiApiClient that,
    required String email,
    required String password,
  });

  Future<void> crateBindingsFfiFfiApiClientLogout({required FfiApiClient that});

  Future<void> crateBindingsFfiFfiApiClientMarkNotificationAsRead({
    required FfiApiClient that,
    required int notificationId,
  });

  FfiApiClient crateBindingsFfiFfiApiClientNew({required String baseUrl});

  Future<RegisterResponse> crateBindingsFfiFfiApiClientRegister({
    required FfiApiClient that,
    required String firstName,
    required String lastName,
    required String email,
    required String password,
  });

  Future<void> crateBindingsFfiFfiApiClientResendConfirmEmail({
    required FfiApiClient that,
    required String email,
  });

  Future<void> crateBindingsFfiFfiApiClientResetPassword({
    required FfiApiClient that,
    required String token,
    required String newPassword,
  });

  void crateBindingsFfiFfiApiClientSetAuthToken({
    required FfiApiClient that,
    required String token,
  });

  Future<void> crateBindingsFfiFfiApiClientUpdateEmail({
    required FfiApiClient that,
    required String newEmail,
  });

  Future<Profile> crateBindingsFfiFfiApiClientUpdateLocalUserProfile({
    required FfiApiClient that,
    required Profile profile,
  });

  Future<void> crateBindingsFfiFfiApiClientUpdatePassword({
    required FfiApiClient that,
    required String oldPassword,
    required String newPassword,
  });

  Future<Profile> crateBindingsFfiFfiApiClientUploadCoverPhoto({
    required FfiApiClient that,
    required String name,
    required String mime,
    required List<int> buffer,
  });

  Future<Profile> crateBindingsFfiFfiApiClientUploadProfilePicture({
    required FfiApiClient that,
    required String name,
    required String mime,
    required List<int> buffer,
  });

  Future<Profile> crateBindingsFfiFfiApiClientUploadResume({
    required FfiApiClient that,
    required String name,
    required String mime,
    required List<int> buffer,
  });

  Future<void> crateBindingsFfiInitApp();

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_FfiApiClient;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_FfiApiClient;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_FfiApiClientPtr;

  RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_Value;

  RustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_Value;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_ValuePtr;
}

class RustLibApiImpl extends RustLibApiImplPlatform implements RustLibApi {
  RustLibApiImpl({
    required super.handler,
    required super.wire,
    required super.generalizedFrbRustBinding,
    required super.portManager,
  });

  @override
  Future<void> crateBindingsFfiFfiApiClientDeleteAccount({
    required FfiApiClient that,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFfiApiClient(
            that,
            serializer,
          );
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 1,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: sse_decode_String,
        ),
        constMeta: kCrateBindingsFfiFfiApiClientDeleteAccountConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateBindingsFfiFfiApiClientDeleteAccountConstMeta =>
      const TaskConstMeta(
        debugName: "FfiApiClient_delete_account",
        argNames: ["that"],
      );

  @override
  Future<Profile> crateBindingsFfiFfiApiClientDeleteCoverPhoto({
    required FfiApiClient that,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFfiApiClient(
            that,
            serializer,
          );
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 2,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_profile,
          decodeErrorData: sse_decode_String,
        ),
        constMeta: kCrateBindingsFfiFfiApiClientDeleteCoverPhotoConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateBindingsFfiFfiApiClientDeleteCoverPhotoConstMeta =>
      const TaskConstMeta(
        debugName: "FfiApiClient_delete_cover_photo",
        argNames: ["that"],
      );

  @override
  Future<void> crateBindingsFfiFfiApiClientDeleteNotification({
    required FfiApiClient that,
    required int notificationId,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFfiApiClient(
            that,
            serializer,
          );
          sse_encode_i_32(notificationId, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 3,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: sse_decode_String,
        ),
        constMeta: kCrateBindingsFfiFfiApiClientDeleteNotificationConstMeta,
        argValues: [that, notificationId],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateBindingsFfiFfiApiClientDeleteNotificationConstMeta =>
      const TaskConstMeta(
        debugName: "FfiApiClient_delete_notification",
        argNames: ["that", "notificationId"],
      );

  @override
  Future<Profile> crateBindingsFfiFfiApiClientDeleteProfilePicture({
    required FfiApiClient that,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFfiApiClient(
            that,
            serializer,
          );
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 4,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_profile,
          decodeErrorData: sse_decode_String,
        ),
        constMeta: kCrateBindingsFfiFfiApiClientDeleteProfilePictureConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateBindingsFfiFfiApiClientDeleteProfilePictureConstMeta =>
      const TaskConstMeta(
        debugName: "FfiApiClient_delete_profile_picture",
        argNames: ["that"],
      );

  @override
  Future<Profile> crateBindingsFfiFfiApiClientDeleteResume({
    required FfiApiClient that,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFfiApiClient(
            that,
            serializer,
          );
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 5,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_profile,
          decodeErrorData: sse_decode_String,
        ),
        constMeta: kCrateBindingsFfiFfiApiClientDeleteResumeConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateBindingsFfiFfiApiClientDeleteResumeConstMeta =>
      const TaskConstMeta(
        debugName: "FfiApiClient_delete_resume",
        argNames: ["that"],
      );

  @override
  Future<void> crateBindingsFfiFfiApiClientForgetPassword({
    required FfiApiClient that,
    required String email,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFfiApiClient(
            that,
            serializer,
          );
          sse_encode_String(email, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 6,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: sse_decode_String,
        ),
        constMeta: kCrateBindingsFfiFfiApiClientForgetPasswordConstMeta,
        argValues: [that, email],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateBindingsFfiFfiApiClientForgetPasswordConstMeta =>
      const TaskConstMeta(
        debugName: "FfiApiClient_forget_password",
        argNames: ["that", "email"],
      );

  @override
  String crateBindingsFfiFfiApiClientGetAuthToken({
    required FfiApiClient that,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFfiApiClient(
            that,
            serializer,
          );
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 7)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_String,
          decodeErrorData: sse_decode_String,
        ),
        constMeta: kCrateBindingsFfiFfiApiClientGetAuthTokenConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateBindingsFfiFfiApiClientGetAuthTokenConstMeta =>
      const TaskConstMeta(
        debugName: "FfiApiClient_get_auth_token",
        argNames: ["that"],
      );

  @override
  Future<String> crateBindingsFfiFfiApiClientGetGatewayHealth({
    required FfiApiClient that,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFfiApiClient(
            that,
            serializer,
          );
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 8,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_String,
          decodeErrorData: sse_decode_String,
        ),
        constMeta: kCrateBindingsFfiFfiApiClientGetGatewayHealthConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateBindingsFfiFfiApiClientGetGatewayHealthConstMeta =>
      const TaskConstMeta(
        debugName: "FfiApiClient_get_gateway_health",
        argNames: ["that"],
      );

  @override
  Future<Profile> crateBindingsFfiFfiApiClientGetLocalUserProfile({
    required FfiApiClient that,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFfiApiClient(
            that,
            serializer,
          );
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 9,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_profile,
          decodeErrorData: sse_decode_String,
        ),
        constMeta: kCrateBindingsFfiFfiApiClientGetLocalUserProfileConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateBindingsFfiFfiApiClientGetLocalUserProfileConstMeta =>
      const TaskConstMeta(
        debugName: "FfiApiClient_get_local_user_profile",
        argNames: ["that"],
      );

  @override
  Future<List<Notification>> crateBindingsFfiFfiApiClientGetNotifications({
    required FfiApiClient that,
    int? page,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFfiApiClient(
            that,
            serializer,
          );
          sse_encode_opt_box_autoadd_i_32(page, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 10,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_list_notification,
          decodeErrorData: sse_decode_String,
        ),
        constMeta: kCrateBindingsFfiFfiApiClientGetNotificationsConstMeta,
        argValues: [that, page],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateBindingsFfiFfiApiClientGetNotificationsConstMeta =>
      const TaskConstMeta(
        debugName: "FfiApiClient_get_notifications",
        argNames: ["that", "page"],
      );

  @override
  Future<LoginResponse> crateBindingsFfiFfiApiClientLogin({
    required FfiApiClient that,
    required String email,
    required String password,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFfiApiClient(
            that,
            serializer,
          );
          sse_encode_String(email, serializer);
          sse_encode_String(password, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 11,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_login_response,
          decodeErrorData: sse_decode_String,
        ),
        constMeta: kCrateBindingsFfiFfiApiClientLoginConstMeta,
        argValues: [that, email, password],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateBindingsFfiFfiApiClientLoginConstMeta =>
      const TaskConstMeta(
        debugName: "FfiApiClient_login",
        argNames: ["that", "email", "password"],
      );

  @override
  Future<void> crateBindingsFfiFfiApiClientLogout({
    required FfiApiClient that,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFfiApiClient(
            that,
            serializer,
          );
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 12,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: sse_decode_String,
        ),
        constMeta: kCrateBindingsFfiFfiApiClientLogoutConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateBindingsFfiFfiApiClientLogoutConstMeta =>
      const TaskConstMeta(debugName: "FfiApiClient_logout", argNames: ["that"]);

  @override
  Future<void> crateBindingsFfiFfiApiClientMarkNotificationAsRead({
    required FfiApiClient that,
    required int notificationId,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFfiApiClient(
            that,
            serializer,
          );
          sse_encode_i_32(notificationId, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 13,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: sse_decode_String,
        ),
        constMeta: kCrateBindingsFfiFfiApiClientMarkNotificationAsReadConstMeta,
        argValues: [that, notificationId],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateBindingsFfiFfiApiClientMarkNotificationAsReadConstMeta =>
      const TaskConstMeta(
        debugName: "FfiApiClient_mark_notification_as_read",
        argNames: ["that", "notificationId"],
      );

  @override
  FfiApiClient crateBindingsFfiFfiApiClientNew({required String baseUrl}) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(baseUrl, serializer);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 14)!;
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFfiApiClient,
          decodeErrorData: null,
        ),
        constMeta: kCrateBindingsFfiFfiApiClientNewConstMeta,
        argValues: [baseUrl],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateBindingsFfiFfiApiClientNewConstMeta =>
      const TaskConstMeta(debugName: "FfiApiClient_new", argNames: ["baseUrl"]);

  @override
  Future<RegisterResponse> crateBindingsFfiFfiApiClientRegister({
    required FfiApiClient that,
    required String firstName,
    required String lastName,
    required String email,
    required String password,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFfiApiClient(
            that,
            serializer,
          );
          sse_encode_String(firstName, serializer);
          sse_encode_String(lastName, serializer);
          sse_encode_String(email, serializer);
          sse_encode_String(password, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 15,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_register_response,
          decodeErrorData: sse_decode_String,
        ),
        constMeta: kCrateBindingsFfiFfiApiClientRegisterConstMeta,
        argValues: [that, firstName, lastName, email, password],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateBindingsFfiFfiApiClientRegisterConstMeta =>
      const TaskConstMeta(
        debugName: "FfiApiClient_register",
        argNames: ["that", "firstName", "lastName", "email", "password"],
      );

  @override
  Future<void> crateBindingsFfiFfiApiClientResendConfirmEmail({
    required FfiApiClient that,
    required String email,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFfiApiClient(
            that,
            serializer,
          );
          sse_encode_String(email, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 16,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: sse_decode_String,
        ),
        constMeta: kCrateBindingsFfiFfiApiClientResendConfirmEmailConstMeta,
        argValues: [that, email],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateBindingsFfiFfiApiClientResendConfirmEmailConstMeta =>
      const TaskConstMeta(
        debugName: "FfiApiClient_resend_confirm_email",
        argNames: ["that", "email"],
      );

  @override
  Future<void> crateBindingsFfiFfiApiClientResetPassword({
    required FfiApiClient that,
    required String token,
    required String newPassword,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFfiApiClient(
            that,
            serializer,
          );
          sse_encode_String(token, serializer);
          sse_encode_String(newPassword, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 17,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: sse_decode_String,
        ),
        constMeta: kCrateBindingsFfiFfiApiClientResetPasswordConstMeta,
        argValues: [that, token, newPassword],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateBindingsFfiFfiApiClientResetPasswordConstMeta =>
      const TaskConstMeta(
        debugName: "FfiApiClient_reset_password",
        argNames: ["that", "token", "newPassword"],
      );

  @override
  void crateBindingsFfiFfiApiClientSetAuthToken({
    required FfiApiClient that,
    required String token,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFfiApiClient(
            that,
            serializer,
          );
          sse_encode_String(token, serializer);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 18)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        ),
        constMeta: kCrateBindingsFfiFfiApiClientSetAuthTokenConstMeta,
        argValues: [that, token],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateBindingsFfiFfiApiClientSetAuthTokenConstMeta =>
      const TaskConstMeta(
        debugName: "FfiApiClient_set_auth_token",
        argNames: ["that", "token"],
      );

  @override
  Future<void> crateBindingsFfiFfiApiClientUpdateEmail({
    required FfiApiClient that,
    required String newEmail,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFfiApiClient(
            that,
            serializer,
          );
          sse_encode_String(newEmail, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 19,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: sse_decode_String,
        ),
        constMeta: kCrateBindingsFfiFfiApiClientUpdateEmailConstMeta,
        argValues: [that, newEmail],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateBindingsFfiFfiApiClientUpdateEmailConstMeta =>
      const TaskConstMeta(
        debugName: "FfiApiClient_update_email",
        argNames: ["that", "newEmail"],
      );

  @override
  Future<Profile> crateBindingsFfiFfiApiClientUpdateLocalUserProfile({
    required FfiApiClient that,
    required Profile profile,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFfiApiClient(
            that,
            serializer,
          );
          sse_encode_box_autoadd_profile(profile, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 20,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_profile,
          decodeErrorData: sse_decode_String,
        ),
        constMeta: kCrateBindingsFfiFfiApiClientUpdateLocalUserProfileConstMeta,
        argValues: [that, profile],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateBindingsFfiFfiApiClientUpdateLocalUserProfileConstMeta =>
      const TaskConstMeta(
        debugName: "FfiApiClient_update_local_user_profile",
        argNames: ["that", "profile"],
      );

  @override
  Future<void> crateBindingsFfiFfiApiClientUpdatePassword({
    required FfiApiClient that,
    required String oldPassword,
    required String newPassword,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFfiApiClient(
            that,
            serializer,
          );
          sse_encode_String(oldPassword, serializer);
          sse_encode_String(newPassword, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 21,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: sse_decode_String,
        ),
        constMeta: kCrateBindingsFfiFfiApiClientUpdatePasswordConstMeta,
        argValues: [that, oldPassword, newPassword],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateBindingsFfiFfiApiClientUpdatePasswordConstMeta =>
      const TaskConstMeta(
        debugName: "FfiApiClient_update_password",
        argNames: ["that", "oldPassword", "newPassword"],
      );

  @override
  Future<Profile> crateBindingsFfiFfiApiClientUploadCoverPhoto({
    required FfiApiClient that,
    required String name,
    required String mime,
    required List<int> buffer,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFfiApiClient(
            that,
            serializer,
          );
          sse_encode_String(name, serializer);
          sse_encode_String(mime, serializer);
          sse_encode_list_prim_u_8_loose(buffer, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 22,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_profile,
          decodeErrorData: sse_decode_String,
        ),
        constMeta: kCrateBindingsFfiFfiApiClientUploadCoverPhotoConstMeta,
        argValues: [that, name, mime, buffer],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateBindingsFfiFfiApiClientUploadCoverPhotoConstMeta =>
      const TaskConstMeta(
        debugName: "FfiApiClient_upload_cover_photo",
        argNames: ["that", "name", "mime", "buffer"],
      );

  @override
  Future<Profile> crateBindingsFfiFfiApiClientUploadProfilePicture({
    required FfiApiClient that,
    required String name,
    required String mime,
    required List<int> buffer,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFfiApiClient(
            that,
            serializer,
          );
          sse_encode_String(name, serializer);
          sse_encode_String(mime, serializer);
          sse_encode_list_prim_u_8_loose(buffer, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 23,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_profile,
          decodeErrorData: sse_decode_String,
        ),
        constMeta: kCrateBindingsFfiFfiApiClientUploadProfilePictureConstMeta,
        argValues: [that, name, mime, buffer],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateBindingsFfiFfiApiClientUploadProfilePictureConstMeta =>
      const TaskConstMeta(
        debugName: "FfiApiClient_upload_profile_picture",
        argNames: ["that", "name", "mime", "buffer"],
      );

  @override
  Future<Profile> crateBindingsFfiFfiApiClientUploadResume({
    required FfiApiClient that,
    required String name,
    required String mime,
    required List<int> buffer,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFfiApiClient(
            that,
            serializer,
          );
          sse_encode_String(name, serializer);
          sse_encode_String(mime, serializer);
          sse_encode_list_prim_u_8_loose(buffer, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 24,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_profile,
          decodeErrorData: sse_decode_String,
        ),
        constMeta: kCrateBindingsFfiFfiApiClientUploadResumeConstMeta,
        argValues: [that, name, mime, buffer],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateBindingsFfiFfiApiClientUploadResumeConstMeta =>
      const TaskConstMeta(
        debugName: "FfiApiClient_upload_resume",
        argNames: ["that", "name", "mime", "buffer"],
      );

  @override
  Future<void> crateBindingsFfiInitApp() {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 25,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        ),
        constMeta: kCrateBindingsFfiInitAppConstMeta,
        argValues: [],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateBindingsFfiInitAppConstMeta =>
      const TaskConstMeta(debugName: "init_app", argNames: []);

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_FfiApiClient =>
      wire.rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFfiApiClient;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_FfiApiClient =>
      wire.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFfiApiClient;

  RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_Value =>
      wire.rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerValue;

  RustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_Value =>
      wire.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerValue;

  @protected
  FfiApiClient
  dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFfiApiClient(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return FfiApiClientImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  Value
  dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerValue(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ValueImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  FfiApiClient
  dco_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFfiApiClient(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return FfiApiClientImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  FfiApiClient
  dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFfiApiClient(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return FfiApiClientImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  DateTime dco_decode_Chrono_Utc(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dcoDecodeTimestamp(ts: dco_decode_i_64(raw).toInt(), isUtc: true);
  }

  @protected
  FfiApiClient
  dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFfiApiClient(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return FfiApiClientImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  Value
  dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerValue(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ValueImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  String dco_decode_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as String;
  }

  @protected
  bool dco_decode_bool(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as bool;
  }

  @protected
  Value
  dco_decode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerValue(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerValue(
      raw,
    );
  }

  @protected
  DateTime dco_decode_box_autoadd_Chrono_Utc(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_Chrono_Utc(raw);
  }

  @protected
  bool dco_decode_box_autoadd_bool(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as bool;
  }

  @protected
  ContactInfo dco_decode_box_autoadd_contact_info(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_contact_info(raw);
  }

  @protected
  int dco_decode_box_autoadd_i_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  PhoneType dco_decode_box_autoadd_phone_type(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_phone_type(raw);
  }

  @protected
  Profile dco_decode_box_autoadd_profile(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_profile(raw);
  }

  @protected
  ContactInfo dco_decode_contact_info(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 9)
      throw Exception('unexpected arr length: expect 9 but see ${arr.length}');
    return ContactInfo(
      userId: dco_decode_opt_box_autoadd_i_32(arr[0]),
      profileUrl: dco_decode_opt_String(arr[1]),
      email: dco_decode_opt_String(arr[2]),
      phone: dco_decode_opt_String(arr[3]),
      phoneType: dco_decode_opt_box_autoadd_phone_type(arr[4]),
      address: dco_decode_opt_String(arr[5]),
      birthday: dco_decode_opt_box_autoadd_Chrono_Utc(arr[6]),
      createdAt: dco_decode_opt_box_autoadd_Chrono_Utc(arr[7]),
      updatedAt: dco_decode_opt_box_autoadd_Chrono_Utc(arr[8]),
    );
  }

  @protected
  Course dco_decode_course(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 7)
      throw Exception('unexpected arr length: expect 7 but see ${arr.length}');
    return Course(
      id: dco_decode_opt_box_autoadd_i_32(arr[0]),
      userId: dco_decode_opt_box_autoadd_i_32(arr[1]),
      name: dco_decode_opt_String(arr[2]),
      provider: dco_decode_opt_String(arr[3]),
      completionDate: dco_decode_opt_box_autoadd_Chrono_Utc(arr[4]),
      createdAt: dco_decode_opt_box_autoadd_Chrono_Utc(arr[5]),
      updatedAt: dco_decode_opt_box_autoadd_Chrono_Utc(arr[6]),
    );
  }

  @protected
  Education dco_decode_education(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 9)
      throw Exception('unexpected arr length: expect 9 but see ${arr.length}');
    return Education(
      id: dco_decode_opt_box_autoadd_i_32(arr[0]),
      userId: dco_decode_opt_box_autoadd_i_32(arr[1]),
      school: dco_decode_opt_String(arr[2]),
      degree: dco_decode_opt_String(arr[3]),
      fieldOfStudy: dco_decode_opt_String(arr[4]),
      startDate: dco_decode_opt_box_autoadd_Chrono_Utc(arr[5]),
      endDate: dco_decode_opt_String(arr[6]),
      createdAt: dco_decode_opt_box_autoadd_Chrono_Utc(arr[7]),
      updatedAt: dco_decode_opt_box_autoadd_Chrono_Utc(arr[8]),
    );
  }

  @protected
  Experience dco_decode_experience(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 9)
      throw Exception('unexpected arr length: expect 9 but see ${arr.length}');
    return Experience(
      id: dco_decode_opt_box_autoadd_i_32(arr[0]),
      userId: dco_decode_opt_box_autoadd_i_32(arr[1]),
      company: dco_decode_opt_String(arr[2]),
      position: dco_decode_opt_String(arr[3]),
      startDate: dco_decode_opt_box_autoadd_Chrono_Utc(arr[4]),
      endDate: dco_decode_opt_box_autoadd_Chrono_Utc(arr[5]),
      description: dco_decode_opt_String(arr[6]),
      createdAt: dco_decode_opt_box_autoadd_Chrono_Utc(arr[7]),
      updatedAt: dco_decode_opt_box_autoadd_Chrono_Utc(arr[8]),
    );
  }

  @protected
  int dco_decode_i_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  PlatformInt64 dco_decode_i_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dcoDecodeI64(raw);
  }

  @protected
  Interest dco_decode_interest(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return Interest(
      id: dco_decode_opt_box_autoadd_i_32(arr[0]),
      name: dco_decode_opt_String(arr[1]),
    );
  }

  @protected
  List<Course> dco_decode_list_course(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_course).toList();
  }

  @protected
  List<Education> dco_decode_list_education(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_education).toList();
  }

  @protected
  List<Experience> dco_decode_list_experience(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_experience).toList();
  }

  @protected
  List<Interest> dco_decode_list_interest(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_interest).toList();
  }

  @protected
  List<Notification> dco_decode_list_notification(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_notification).toList();
  }

  @protected
  List<int> dco_decode_list_prim_u_8_loose(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as List<int>;
  }

  @protected
  Uint8List dco_decode_list_prim_u_8_strict(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as Uint8List;
  }

  @protected
  List<Project> dco_decode_list_project(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_project).toList();
  }

  @protected
  List<Skill> dco_decode_list_skill(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_skill).toList();
  }

  @protected
  LoginResponse dco_decode_login_response(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return LoginResponse(
      token: dco_decode_String(arr[0]),
      userId: dco_decode_i_32(arr[1]),
    );
  }

  @protected
  Notification dco_decode_notification(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 8)
      throw Exception('unexpected arr length: expect 8 but see ${arr.length}');
    return Notification(
      id: dco_decode_i_32(arr[0]),
      userId: dco_decode_i_32(arr[1]),
      type: dco_decode_notification_type(arr[2]),
      message: dco_decode_String(arr[3]),
      payload:
          dco_decode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerValue(
            arr[4],
          ),
      isRead: dco_decode_opt_box_autoadd_bool(arr[5]),
      createdAt: dco_decode_opt_box_autoadd_Chrono_Utc(arr[6]),
      updatedAt: dco_decode_opt_box_autoadd_Chrono_Utc(arr[7]),
    );
  }

  @protected
  NotificationType dco_decode_notification_type(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return NotificationType.values[raw as int];
  }

  @protected
  String? dco_decode_opt_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_String(raw);
  }

  @protected
  Value?
  dco_decode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerValue(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null
        ? null
        : dco_decode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerValue(
          raw,
        );
  }

  @protected
  DateTime? dco_decode_opt_box_autoadd_Chrono_Utc(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_Chrono_Utc(raw);
  }

  @protected
  bool? dco_decode_opt_box_autoadd_bool(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_bool(raw);
  }

  @protected
  ContactInfo? dco_decode_opt_box_autoadd_contact_info(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_contact_info(raw);
  }

  @protected
  int? dco_decode_opt_box_autoadd_i_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_i_32(raw);
  }

  @protected
  PhoneType? dco_decode_opt_box_autoadd_phone_type(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_phone_type(raw);
  }

  @protected
  List<Course>? dco_decode_opt_list_course(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_list_course(raw);
  }

  @protected
  List<Education>? dco_decode_opt_list_education(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_list_education(raw);
  }

  @protected
  List<Experience>? dco_decode_opt_list_experience(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_list_experience(raw);
  }

  @protected
  List<Interest>? dco_decode_opt_list_interest(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_list_interest(raw);
  }

  @protected
  List<Project>? dco_decode_opt_list_project(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_list_project(raw);
  }

  @protected
  List<Skill>? dco_decode_opt_list_skill(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_list_skill(raw);
  }

  @protected
  PhoneType dco_decode_phone_type(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return PhoneType.values[raw as int];
  }

  @protected
  Profile dco_decode_profile(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 27)
      throw Exception('unexpected arr length: expect 27 but see ${arr.length}');
    return Profile(
      userId: dco_decode_opt_box_autoadd_i_32(arr[0]),
      firstName: dco_decode_opt_String(arr[1]),
      lastName: dco_decode_opt_String(arr[2]),
      resumeUrl: dco_decode_opt_String(arr[3]),
      resumeId: dco_decode_opt_box_autoadd_i_32(arr[4]),
      coverPhotoUrl: dco_decode_opt_String(arr[5]),
      coverPhotoId: dco_decode_opt_box_autoadd_i_32(arr[6]),
      profilePictureUrl: dco_decode_opt_String(arr[7]),
      profilePictureId: dco_decode_opt_box_autoadd_i_32(arr[8]),
      industry: dco_decode_opt_String(arr[9]),
      location: dco_decode_opt_String(arr[10]),
      bio: dco_decode_opt_String(arr[11]),
      privacy: dco_decode_opt_String(arr[12]),
      showSchool: dco_decode_opt_box_autoadd_bool(arr[13]),
      showCurrentCompany: dco_decode_opt_box_autoadd_bool(arr[14]),
      website: dco_decode_opt_String(arr[15]),
      additionalName: dco_decode_opt_String(arr[16]),
      namePronunciation: dco_decode_opt_String(arr[17]),
      skills: dco_decode_opt_list_skill(arr[18]),
      education: dco_decode_opt_list_education(arr[19]),
      experience: dco_decode_opt_list_experience(arr[20]),
      interests: dco_decode_opt_list_interest(arr[21]),
      projects: dco_decode_opt_list_project(arr[22]),
      courses: dco_decode_opt_list_course(arr[23]),
      contactInfo: dco_decode_opt_box_autoadd_contact_info(arr[24]),
      createdAt: dco_decode_opt_box_autoadd_Chrono_Utc(arr[25]),
      updatedAt: dco_decode_opt_box_autoadd_Chrono_Utc(arr[26]),
    );
  }

  @protected
  Project dco_decode_project(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 9)
      throw Exception('unexpected arr length: expect 9 but see ${arr.length}');
    return Project(
      id: dco_decode_opt_box_autoadd_i_32(arr[0]),
      userId: dco_decode_opt_box_autoadd_i_32(arr[1]),
      name: dco_decode_opt_String(arr[2]),
      description: dco_decode_opt_String(arr[3]),
      startDate: dco_decode_opt_box_autoadd_Chrono_Utc(arr[4]),
      endDate: dco_decode_opt_box_autoadd_Chrono_Utc(arr[5]),
      url: dco_decode_opt_String(arr[6]),
      createdAt: dco_decode_opt_box_autoadd_Chrono_Utc(arr[7]),
      updatedAt: dco_decode_opt_box_autoadd_Chrono_Utc(arr[8]),
    );
  }

  @protected
  RegisterResponse dco_decode_register_response(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return RegisterResponse(
      userId: dco_decode_i_32(arr[0]),
      email: dco_decode_String(arr[1]),
    );
  }

  @protected
  Skill dco_decode_skill(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return Skill(
      id: dco_decode_opt_box_autoadd_i_32(arr[0]),
      name: dco_decode_opt_String(arr[1]),
    );
  }

  @protected
  int dco_decode_u_8(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  void dco_decode_unit(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return;
  }

  @protected
  BigInt dco_decode_usize(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dcoDecodeU64(raw);
  }

  @protected
  FfiApiClient
  sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFfiApiClient(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return FfiApiClientImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  Value
  sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerValue(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ValueImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  FfiApiClient
  sse_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFfiApiClient(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return FfiApiClientImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  FfiApiClient
  sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFfiApiClient(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return FfiApiClientImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  DateTime sse_decode_Chrono_Utc(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_i_64(deserializer);
    return DateTime.fromMicrosecondsSinceEpoch(inner.toInt(), isUtc: true);
  }

  @protected
  FfiApiClient
  sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFfiApiClient(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return FfiApiClientImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  Value
  sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerValue(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ValueImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  String sse_decode_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_prim_u_8_strict(deserializer);
    return utf8.decoder.convert(inner);
  }

  @protected
  bool sse_decode_bool(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8() != 0;
  }

  @protected
  Value
  sse_decode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerValue(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerValue(
      deserializer,
    ));
  }

  @protected
  DateTime sse_decode_box_autoadd_Chrono_Utc(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_Chrono_Utc(deserializer));
  }

  @protected
  bool sse_decode_box_autoadd_bool(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_bool(deserializer));
  }

  @protected
  ContactInfo sse_decode_box_autoadd_contact_info(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_contact_info(deserializer));
  }

  @protected
  int sse_decode_box_autoadd_i_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_i_32(deserializer));
  }

  @protected
  PhoneType sse_decode_box_autoadd_phone_type(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_phone_type(deserializer));
  }

  @protected
  Profile sse_decode_box_autoadd_profile(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_profile(deserializer));
  }

  @protected
  ContactInfo sse_decode_contact_info(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_userId = sse_decode_opt_box_autoadd_i_32(deserializer);
    var var_profileUrl = sse_decode_opt_String(deserializer);
    var var_email = sse_decode_opt_String(deserializer);
    var var_phone = sse_decode_opt_String(deserializer);
    var var_phoneType = sse_decode_opt_box_autoadd_phone_type(deserializer);
    var var_address = sse_decode_opt_String(deserializer);
    var var_birthday = sse_decode_opt_box_autoadd_Chrono_Utc(deserializer);
    var var_createdAt = sse_decode_opt_box_autoadd_Chrono_Utc(deserializer);
    var var_updatedAt = sse_decode_opt_box_autoadd_Chrono_Utc(deserializer);
    return ContactInfo(
      userId: var_userId,
      profileUrl: var_profileUrl,
      email: var_email,
      phone: var_phone,
      phoneType: var_phoneType,
      address: var_address,
      birthday: var_birthday,
      createdAt: var_createdAt,
      updatedAt: var_updatedAt,
    );
  }

  @protected
  Course sse_decode_course(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_id = sse_decode_opt_box_autoadd_i_32(deserializer);
    var var_userId = sse_decode_opt_box_autoadd_i_32(deserializer);
    var var_name = sse_decode_opt_String(deserializer);
    var var_provider = sse_decode_opt_String(deserializer);
    var var_completionDate = sse_decode_opt_box_autoadd_Chrono_Utc(
      deserializer,
    );
    var var_createdAt = sse_decode_opt_box_autoadd_Chrono_Utc(deserializer);
    var var_updatedAt = sse_decode_opt_box_autoadd_Chrono_Utc(deserializer);
    return Course(
      id: var_id,
      userId: var_userId,
      name: var_name,
      provider: var_provider,
      completionDate: var_completionDate,
      createdAt: var_createdAt,
      updatedAt: var_updatedAt,
    );
  }

  @protected
  Education sse_decode_education(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_id = sse_decode_opt_box_autoadd_i_32(deserializer);
    var var_userId = sse_decode_opt_box_autoadd_i_32(deserializer);
    var var_school = sse_decode_opt_String(deserializer);
    var var_degree = sse_decode_opt_String(deserializer);
    var var_fieldOfStudy = sse_decode_opt_String(deserializer);
    var var_startDate = sse_decode_opt_box_autoadd_Chrono_Utc(deserializer);
    var var_endDate = sse_decode_opt_String(deserializer);
    var var_createdAt = sse_decode_opt_box_autoadd_Chrono_Utc(deserializer);
    var var_updatedAt = sse_decode_opt_box_autoadd_Chrono_Utc(deserializer);
    return Education(
      id: var_id,
      userId: var_userId,
      school: var_school,
      degree: var_degree,
      fieldOfStudy: var_fieldOfStudy,
      startDate: var_startDate,
      endDate: var_endDate,
      createdAt: var_createdAt,
      updatedAt: var_updatedAt,
    );
  }

  @protected
  Experience sse_decode_experience(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_id = sse_decode_opt_box_autoadd_i_32(deserializer);
    var var_userId = sse_decode_opt_box_autoadd_i_32(deserializer);
    var var_company = sse_decode_opt_String(deserializer);
    var var_position = sse_decode_opt_String(deserializer);
    var var_startDate = sse_decode_opt_box_autoadd_Chrono_Utc(deserializer);
    var var_endDate = sse_decode_opt_box_autoadd_Chrono_Utc(deserializer);
    var var_description = sse_decode_opt_String(deserializer);
    var var_createdAt = sse_decode_opt_box_autoadd_Chrono_Utc(deserializer);
    var var_updatedAt = sse_decode_opt_box_autoadd_Chrono_Utc(deserializer);
    return Experience(
      id: var_id,
      userId: var_userId,
      company: var_company,
      position: var_position,
      startDate: var_startDate,
      endDate: var_endDate,
      description: var_description,
      createdAt: var_createdAt,
      updatedAt: var_updatedAt,
    );
  }

  @protected
  int sse_decode_i_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getInt32();
  }

  @protected
  PlatformInt64 sse_decode_i_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getPlatformInt64();
  }

  @protected
  Interest sse_decode_interest(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_id = sse_decode_opt_box_autoadd_i_32(deserializer);
    var var_name = sse_decode_opt_String(deserializer);
    return Interest(id: var_id, name: var_name);
  }

  @protected
  List<Course> sse_decode_list_course(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <Course>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_course(deserializer));
    }
    return ans_;
  }

  @protected
  List<Education> sse_decode_list_education(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <Education>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_education(deserializer));
    }
    return ans_;
  }

  @protected
  List<Experience> sse_decode_list_experience(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <Experience>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_experience(deserializer));
    }
    return ans_;
  }

  @protected
  List<Interest> sse_decode_list_interest(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <Interest>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_interest(deserializer));
    }
    return ans_;
  }

  @protected
  List<Notification> sse_decode_list_notification(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <Notification>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_notification(deserializer));
    }
    return ans_;
  }

  @protected
  List<int> sse_decode_list_prim_u_8_loose(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getUint8List(len_);
  }

  @protected
  Uint8List sse_decode_list_prim_u_8_strict(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getUint8List(len_);
  }

  @protected
  List<Project> sse_decode_list_project(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <Project>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_project(deserializer));
    }
    return ans_;
  }

  @protected
  List<Skill> sse_decode_list_skill(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <Skill>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_skill(deserializer));
    }
    return ans_;
  }

  @protected
  LoginResponse sse_decode_login_response(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_token = sse_decode_String(deserializer);
    var var_userId = sse_decode_i_32(deserializer);
    return LoginResponse(token: var_token, userId: var_userId);
  }

  @protected
  Notification sse_decode_notification(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_id = sse_decode_i_32(deserializer);
    var var_userId = sse_decode_i_32(deserializer);
    var var_type = sse_decode_notification_type(deserializer);
    var var_message = sse_decode_String(deserializer);
    var var_payload =
        sse_decode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerValue(
          deserializer,
        );
    var var_isRead = sse_decode_opt_box_autoadd_bool(deserializer);
    var var_createdAt = sse_decode_opt_box_autoadd_Chrono_Utc(deserializer);
    var var_updatedAt = sse_decode_opt_box_autoadd_Chrono_Utc(deserializer);
    return Notification(
      id: var_id,
      userId: var_userId,
      type: var_type,
      message: var_message,
      payload: var_payload,
      isRead: var_isRead,
      createdAt: var_createdAt,
      updatedAt: var_updatedAt,
    );
  }

  @protected
  NotificationType sse_decode_notification_type(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_i_32(deserializer);
    return NotificationType.values[inner];
  }

  @protected
  String? sse_decode_opt_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_String(deserializer));
    } else {
      return null;
    }
  }

  @protected
  Value?
  sse_decode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerValue(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerValue(
        deserializer,
      ));
    } else {
      return null;
    }
  }

  @protected
  DateTime? sse_decode_opt_box_autoadd_Chrono_Utc(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_Chrono_Utc(deserializer));
    } else {
      return null;
    }
  }

  @protected
  bool? sse_decode_opt_box_autoadd_bool(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_bool(deserializer));
    } else {
      return null;
    }
  }

  @protected
  ContactInfo? sse_decode_opt_box_autoadd_contact_info(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_contact_info(deserializer));
    } else {
      return null;
    }
  }

  @protected
  int? sse_decode_opt_box_autoadd_i_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_i_32(deserializer));
    } else {
      return null;
    }
  }

  @protected
  PhoneType? sse_decode_opt_box_autoadd_phone_type(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_phone_type(deserializer));
    } else {
      return null;
    }
  }

  @protected
  List<Course>? sse_decode_opt_list_course(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_list_course(deserializer));
    } else {
      return null;
    }
  }

  @protected
  List<Education>? sse_decode_opt_list_education(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_list_education(deserializer));
    } else {
      return null;
    }
  }

  @protected
  List<Experience>? sse_decode_opt_list_experience(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_list_experience(deserializer));
    } else {
      return null;
    }
  }

  @protected
  List<Interest>? sse_decode_opt_list_interest(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_list_interest(deserializer));
    } else {
      return null;
    }
  }

  @protected
  List<Project>? sse_decode_opt_list_project(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_list_project(deserializer));
    } else {
      return null;
    }
  }

  @protected
  List<Skill>? sse_decode_opt_list_skill(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_list_skill(deserializer));
    } else {
      return null;
    }
  }

  @protected
  PhoneType sse_decode_phone_type(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_i_32(deserializer);
    return PhoneType.values[inner];
  }

  @protected
  Profile sse_decode_profile(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_userId = sse_decode_opt_box_autoadd_i_32(deserializer);
    var var_firstName = sse_decode_opt_String(deserializer);
    var var_lastName = sse_decode_opt_String(deserializer);
    var var_resumeUrl = sse_decode_opt_String(deserializer);
    var var_resumeId = sse_decode_opt_box_autoadd_i_32(deserializer);
    var var_coverPhotoUrl = sse_decode_opt_String(deserializer);
    var var_coverPhotoId = sse_decode_opt_box_autoadd_i_32(deserializer);
    var var_profilePictureUrl = sse_decode_opt_String(deserializer);
    var var_profilePictureId = sse_decode_opt_box_autoadd_i_32(deserializer);
    var var_industry = sse_decode_opt_String(deserializer);
    var var_location = sse_decode_opt_String(deserializer);
    var var_bio = sse_decode_opt_String(deserializer);
    var var_privacy = sse_decode_opt_String(deserializer);
    var var_showSchool = sse_decode_opt_box_autoadd_bool(deserializer);
    var var_showCurrentCompany = sse_decode_opt_box_autoadd_bool(deserializer);
    var var_website = sse_decode_opt_String(deserializer);
    var var_additionalName = sse_decode_opt_String(deserializer);
    var var_namePronunciation = sse_decode_opt_String(deserializer);
    var var_skills = sse_decode_opt_list_skill(deserializer);
    var var_education = sse_decode_opt_list_education(deserializer);
    var var_experience = sse_decode_opt_list_experience(deserializer);
    var var_interests = sse_decode_opt_list_interest(deserializer);
    var var_projects = sse_decode_opt_list_project(deserializer);
    var var_courses = sse_decode_opt_list_course(deserializer);
    var var_contactInfo = sse_decode_opt_box_autoadd_contact_info(deserializer);
    var var_createdAt = sse_decode_opt_box_autoadd_Chrono_Utc(deserializer);
    var var_updatedAt = sse_decode_opt_box_autoadd_Chrono_Utc(deserializer);
    return Profile(
      userId: var_userId,
      firstName: var_firstName,
      lastName: var_lastName,
      resumeUrl: var_resumeUrl,
      resumeId: var_resumeId,
      coverPhotoUrl: var_coverPhotoUrl,
      coverPhotoId: var_coverPhotoId,
      profilePictureUrl: var_profilePictureUrl,
      profilePictureId: var_profilePictureId,
      industry: var_industry,
      location: var_location,
      bio: var_bio,
      privacy: var_privacy,
      showSchool: var_showSchool,
      showCurrentCompany: var_showCurrentCompany,
      website: var_website,
      additionalName: var_additionalName,
      namePronunciation: var_namePronunciation,
      skills: var_skills,
      education: var_education,
      experience: var_experience,
      interests: var_interests,
      projects: var_projects,
      courses: var_courses,
      contactInfo: var_contactInfo,
      createdAt: var_createdAt,
      updatedAt: var_updatedAt,
    );
  }

  @protected
  Project sse_decode_project(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_id = sse_decode_opt_box_autoadd_i_32(deserializer);
    var var_userId = sse_decode_opt_box_autoadd_i_32(deserializer);
    var var_name = sse_decode_opt_String(deserializer);
    var var_description = sse_decode_opt_String(deserializer);
    var var_startDate = sse_decode_opt_box_autoadd_Chrono_Utc(deserializer);
    var var_endDate = sse_decode_opt_box_autoadd_Chrono_Utc(deserializer);
    var var_url = sse_decode_opt_String(deserializer);
    var var_createdAt = sse_decode_opt_box_autoadd_Chrono_Utc(deserializer);
    var var_updatedAt = sse_decode_opt_box_autoadd_Chrono_Utc(deserializer);
    return Project(
      id: var_id,
      userId: var_userId,
      name: var_name,
      description: var_description,
      startDate: var_startDate,
      endDate: var_endDate,
      url: var_url,
      createdAt: var_createdAt,
      updatedAt: var_updatedAt,
    );
  }

  @protected
  RegisterResponse sse_decode_register_response(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_userId = sse_decode_i_32(deserializer);
    var var_email = sse_decode_String(deserializer);
    return RegisterResponse(userId: var_userId, email: var_email);
  }

  @protected
  Skill sse_decode_skill(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_id = sse_decode_opt_box_autoadd_i_32(deserializer);
    var var_name = sse_decode_opt_String(deserializer);
    return Skill(id: var_id, name: var_name);
  }

  @protected
  int sse_decode_u_8(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8();
  }

  @protected
  void sse_decode_unit(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  BigInt sse_decode_usize(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getBigUint64();
  }

  @protected
  void
  sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFfiApiClient(
    FfiApiClient self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as FfiApiClientImpl).frbInternalSseEncode(move: true),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerValue(
    Value self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as ValueImpl).frbInternalSseEncode(move: true),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFfiApiClient(
    FfiApiClient self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as FfiApiClientImpl).frbInternalSseEncode(move: false),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFfiApiClient(
    FfiApiClient self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as FfiApiClientImpl).frbInternalSseEncode(move: false),
      serializer,
    );
  }

  @protected
  void sse_encode_Chrono_Utc(DateTime self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_64(
      PlatformInt64Util.from(self.microsecondsSinceEpoch),
      serializer,
    );
  }

  @protected
  void
  sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFfiApiClient(
    FfiApiClient self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as FfiApiClientImpl).frbInternalSseEncode(move: null),
      serializer,
    );
  }

  @protected
  void
  sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerValue(
    Value self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as ValueImpl).frbInternalSseEncode(move: null),
      serializer,
    );
  }

  @protected
  void sse_encode_String(String self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_prim_u_8_strict(utf8.encoder.convert(self), serializer);
  }

  @protected
  void sse_encode_bool(bool self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self ? 1 : 0);
  }

  @protected
  void
  sse_encode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerValue(
    Value self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerValue(
      self,
      serializer,
    );
  }

  @protected
  void sse_encode_box_autoadd_Chrono_Utc(
    DateTime self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_Chrono_Utc(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_bool(bool self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_bool(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_contact_info(
    ContactInfo self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_contact_info(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_i_32(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_phone_type(
    PhoneType self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_phone_type(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_profile(Profile self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_profile(self, serializer);
  }

  @protected
  void sse_encode_contact_info(ContactInfo self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_opt_box_autoadd_i_32(self.userId, serializer);
    sse_encode_opt_String(self.profileUrl, serializer);
    sse_encode_opt_String(self.email, serializer);
    sse_encode_opt_String(self.phone, serializer);
    sse_encode_opt_box_autoadd_phone_type(self.phoneType, serializer);
    sse_encode_opt_String(self.address, serializer);
    sse_encode_opt_box_autoadd_Chrono_Utc(self.birthday, serializer);
    sse_encode_opt_box_autoadd_Chrono_Utc(self.createdAt, serializer);
    sse_encode_opt_box_autoadd_Chrono_Utc(self.updatedAt, serializer);
  }

  @protected
  void sse_encode_course(Course self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_opt_box_autoadd_i_32(self.id, serializer);
    sse_encode_opt_box_autoadd_i_32(self.userId, serializer);
    sse_encode_opt_String(self.name, serializer);
    sse_encode_opt_String(self.provider, serializer);
    sse_encode_opt_box_autoadd_Chrono_Utc(self.completionDate, serializer);
    sse_encode_opt_box_autoadd_Chrono_Utc(self.createdAt, serializer);
    sse_encode_opt_box_autoadd_Chrono_Utc(self.updatedAt, serializer);
  }

  @protected
  void sse_encode_education(Education self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_opt_box_autoadd_i_32(self.id, serializer);
    sse_encode_opt_box_autoadd_i_32(self.userId, serializer);
    sse_encode_opt_String(self.school, serializer);
    sse_encode_opt_String(self.degree, serializer);
    sse_encode_opt_String(self.fieldOfStudy, serializer);
    sse_encode_opt_box_autoadd_Chrono_Utc(self.startDate, serializer);
    sse_encode_opt_String(self.endDate, serializer);
    sse_encode_opt_box_autoadd_Chrono_Utc(self.createdAt, serializer);
    sse_encode_opt_box_autoadd_Chrono_Utc(self.updatedAt, serializer);
  }

  @protected
  void sse_encode_experience(Experience self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_opt_box_autoadd_i_32(self.id, serializer);
    sse_encode_opt_box_autoadd_i_32(self.userId, serializer);
    sse_encode_opt_String(self.company, serializer);
    sse_encode_opt_String(self.position, serializer);
    sse_encode_opt_box_autoadd_Chrono_Utc(self.startDate, serializer);
    sse_encode_opt_box_autoadd_Chrono_Utc(self.endDate, serializer);
    sse_encode_opt_String(self.description, serializer);
    sse_encode_opt_box_autoadd_Chrono_Utc(self.createdAt, serializer);
    sse_encode_opt_box_autoadd_Chrono_Utc(self.updatedAt, serializer);
  }

  @protected
  void sse_encode_i_32(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putInt32(self);
  }

  @protected
  void sse_encode_i_64(PlatformInt64 self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putPlatformInt64(self);
  }

  @protected
  void sse_encode_interest(Interest self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_opt_box_autoadd_i_32(self.id, serializer);
    sse_encode_opt_String(self.name, serializer);
  }

  @protected
  void sse_encode_list_course(List<Course> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_course(item, serializer);
    }
  }

  @protected
  void sse_encode_list_education(
    List<Education> self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_education(item, serializer);
    }
  }

  @protected
  void sse_encode_list_experience(
    List<Experience> self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_experience(item, serializer);
    }
  }

  @protected
  void sse_encode_list_interest(List<Interest> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_interest(item, serializer);
    }
  }

  @protected
  void sse_encode_list_notification(
    List<Notification> self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_notification(item, serializer);
    }
  }

  @protected
  void sse_encode_list_prim_u_8_loose(
    List<int> self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    serializer.buffer.putUint8List(
      self is Uint8List ? self : Uint8List.fromList(self),
    );
  }

  @protected
  void sse_encode_list_prim_u_8_strict(
    Uint8List self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    serializer.buffer.putUint8List(self);
  }

  @protected
  void sse_encode_list_project(List<Project> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_project(item, serializer);
    }
  }

  @protected
  void sse_encode_list_skill(List<Skill> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_skill(item, serializer);
    }
  }

  @protected
  void sse_encode_login_response(LoginResponse self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.token, serializer);
    sse_encode_i_32(self.userId, serializer);
  }

  @protected
  void sse_encode_notification(Notification self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.id, serializer);
    sse_encode_i_32(self.userId, serializer);
    sse_encode_notification_type(self.type, serializer);
    sse_encode_String(self.message, serializer);
    sse_encode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerValue(
      self.payload,
      serializer,
    );
    sse_encode_opt_box_autoadd_bool(self.isRead, serializer);
    sse_encode_opt_box_autoadd_Chrono_Utc(self.createdAt, serializer);
    sse_encode_opt_box_autoadd_Chrono_Utc(self.updatedAt, serializer);
  }

  @protected
  void sse_encode_notification_type(
    NotificationType self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.index, serializer);
  }

  @protected
  void sse_encode_opt_String(String? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_String(self, serializer);
    }
  }

  @protected
  void
  sse_encode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerValue(
    Value? self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerValue(
        self,
        serializer,
      );
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_Chrono_Utc(
    DateTime? self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_Chrono_Utc(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_bool(bool? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_bool(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_contact_info(
    ContactInfo? self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_contact_info(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_i_32(int? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_i_32(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_phone_type(
    PhoneType? self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_phone_type(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_list_course(
    List<Course>? self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_list_course(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_list_education(
    List<Education>? self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_list_education(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_list_experience(
    List<Experience>? self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_list_experience(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_list_interest(
    List<Interest>? self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_list_interest(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_list_project(
    List<Project>? self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_list_project(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_list_skill(List<Skill>? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_list_skill(self, serializer);
    }
  }

  @protected
  void sse_encode_phone_type(PhoneType self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.index, serializer);
  }

  @protected
  void sse_encode_profile(Profile self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_opt_box_autoadd_i_32(self.userId, serializer);
    sse_encode_opt_String(self.firstName, serializer);
    sse_encode_opt_String(self.lastName, serializer);
    sse_encode_opt_String(self.resumeUrl, serializer);
    sse_encode_opt_box_autoadd_i_32(self.resumeId, serializer);
    sse_encode_opt_String(self.coverPhotoUrl, serializer);
    sse_encode_opt_box_autoadd_i_32(self.coverPhotoId, serializer);
    sse_encode_opt_String(self.profilePictureUrl, serializer);
    sse_encode_opt_box_autoadd_i_32(self.profilePictureId, serializer);
    sse_encode_opt_String(self.industry, serializer);
    sse_encode_opt_String(self.location, serializer);
    sse_encode_opt_String(self.bio, serializer);
    sse_encode_opt_String(self.privacy, serializer);
    sse_encode_opt_box_autoadd_bool(self.showSchool, serializer);
    sse_encode_opt_box_autoadd_bool(self.showCurrentCompany, serializer);
    sse_encode_opt_String(self.website, serializer);
    sse_encode_opt_String(self.additionalName, serializer);
    sse_encode_opt_String(self.namePronunciation, serializer);
    sse_encode_opt_list_skill(self.skills, serializer);
    sse_encode_opt_list_education(self.education, serializer);
    sse_encode_opt_list_experience(self.experience, serializer);
    sse_encode_opt_list_interest(self.interests, serializer);
    sse_encode_opt_list_project(self.projects, serializer);
    sse_encode_opt_list_course(self.courses, serializer);
    sse_encode_opt_box_autoadd_contact_info(self.contactInfo, serializer);
    sse_encode_opt_box_autoadd_Chrono_Utc(self.createdAt, serializer);
    sse_encode_opt_box_autoadd_Chrono_Utc(self.updatedAt, serializer);
  }

  @protected
  void sse_encode_project(Project self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_opt_box_autoadd_i_32(self.id, serializer);
    sse_encode_opt_box_autoadd_i_32(self.userId, serializer);
    sse_encode_opt_String(self.name, serializer);
    sse_encode_opt_String(self.description, serializer);
    sse_encode_opt_box_autoadd_Chrono_Utc(self.startDate, serializer);
    sse_encode_opt_box_autoadd_Chrono_Utc(self.endDate, serializer);
    sse_encode_opt_String(self.url, serializer);
    sse_encode_opt_box_autoadd_Chrono_Utc(self.createdAt, serializer);
    sse_encode_opt_box_autoadd_Chrono_Utc(self.updatedAt, serializer);
  }

  @protected
  void sse_encode_register_response(
    RegisterResponse self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.userId, serializer);
    sse_encode_String(self.email, serializer);
  }

  @protected
  void sse_encode_skill(Skill self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_opt_box_autoadd_i_32(self.id, serializer);
    sse_encode_opt_String(self.name, serializer);
  }

  @protected
  void sse_encode_u_8(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self);
  }

  @protected
  void sse_encode_unit(void self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  void sse_encode_usize(BigInt self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putBigUint64(self);
  }
}

@sealed
class FfiApiClientImpl extends RustOpaque implements FfiApiClient {
  // Not to be used by end users
  FfiApiClientImpl.frbInternalDcoDecode(List<dynamic> wire)
    : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  FfiApiClientImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
    : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_FfiApiClient,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_FfiApiClient,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_FfiApiClientPtr,
  );

  Future<void> deleteAccount() => RustLib.instance.api
      .crateBindingsFfiFfiApiClientDeleteAccount(that: this);

  Future<Profile> deleteCoverPhoto() => RustLib.instance.api
      .crateBindingsFfiFfiApiClientDeleteCoverPhoto(that: this);

  Future<void> deleteNotification({required int notificationId}) =>
      RustLib.instance.api.crateBindingsFfiFfiApiClientDeleteNotification(
        that: this,
        notificationId: notificationId,
      );

  Future<Profile> deleteProfilePicture() => RustLib.instance.api
      .crateBindingsFfiFfiApiClientDeleteProfilePicture(that: this);

  Future<Profile> deleteResume() =>
      RustLib.instance.api.crateBindingsFfiFfiApiClientDeleteResume(that: this);

  Future<void> forgetPassword({required String email}) => RustLib.instance.api
      .crateBindingsFfiFfiApiClientForgetPassword(that: this, email: email);

  String getAuthToken() =>
      RustLib.instance.api.crateBindingsFfiFfiApiClientGetAuthToken(that: this);

  Future<String> getGatewayHealth() => RustLib.instance.api
      .crateBindingsFfiFfiApiClientGetGatewayHealth(that: this);

  Future<Profile> getLocalUserProfile() => RustLib.instance.api
      .crateBindingsFfiFfiApiClientGetLocalUserProfile(that: this);

  Future<List<Notification>> getNotifications({int? page}) => RustLib
      .instance
      .api
      .crateBindingsFfiFfiApiClientGetNotifications(that: this, page: page);

  Future<LoginResponse> login({
    required String email,
    required String password,
  }) => RustLib.instance.api.crateBindingsFfiFfiApiClientLogin(
    that: this,
    email: email,
    password: password,
  );

  Future<void> logout() =>
      RustLib.instance.api.crateBindingsFfiFfiApiClientLogout(that: this);

  Future<void> markNotificationAsRead({required int notificationId}) =>
      RustLib.instance.api.crateBindingsFfiFfiApiClientMarkNotificationAsRead(
        that: this,
        notificationId: notificationId,
      );

  Future<RegisterResponse> register({
    required String firstName,
    required String lastName,
    required String email,
    required String password,
  }) => RustLib.instance.api.crateBindingsFfiFfiApiClientRegister(
    that: this,
    firstName: firstName,
    lastName: lastName,
    email: email,
    password: password,
  );

  Future<void> resendConfirmEmail({required String email}) => RustLib
      .instance
      .api
      .crateBindingsFfiFfiApiClientResendConfirmEmail(that: this, email: email);

  Future<void> resetPassword({
    required String token,
    required String newPassword,
  }) => RustLib.instance.api.crateBindingsFfiFfiApiClientResetPassword(
    that: this,
    token: token,
    newPassword: newPassword,
  );

  void setAuthToken({required String token}) => RustLib.instance.api
      .crateBindingsFfiFfiApiClientSetAuthToken(that: this, token: token);

  Future<void> updateEmail({required String newEmail}) => RustLib.instance.api
      .crateBindingsFfiFfiApiClientUpdateEmail(that: this, newEmail: newEmail);

  Future<Profile> updateLocalUserProfile({required Profile profile}) =>
      RustLib.instance.api.crateBindingsFfiFfiApiClientUpdateLocalUserProfile(
        that: this,
        profile: profile,
      );

  Future<void> updatePassword({
    required String oldPassword,
    required String newPassword,
  }) => RustLib.instance.api.crateBindingsFfiFfiApiClientUpdatePassword(
    that: this,
    oldPassword: oldPassword,
    newPassword: newPassword,
  );

  Future<Profile> uploadCoverPhoto({
    required String name,
    required String mime,
    required List<int> buffer,
  }) => RustLib.instance.api.crateBindingsFfiFfiApiClientUploadCoverPhoto(
    that: this,
    name: name,
    mime: mime,
    buffer: buffer,
  );

  Future<Profile> uploadProfilePicture({
    required String name,
    required String mime,
    required List<int> buffer,
  }) => RustLib.instance.api.crateBindingsFfiFfiApiClientUploadProfilePicture(
    that: this,
    name: name,
    mime: mime,
    buffer: buffer,
  );

  Future<Profile> uploadResume({
    required String name,
    required String mime,
    required List<int> buffer,
  }) => RustLib.instance.api.crateBindingsFfiFfiApiClientUploadResume(
    that: this,
    name: name,
    mime: mime,
    buffer: buffer,
  );
}

@sealed
class ValueImpl extends RustOpaque implements Value {
  // Not to be used by end users
  ValueImpl.frbInternalDcoDecode(List<dynamic> wire)
    : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  ValueImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
    : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_Value,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_Value,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_ValuePtr,
  );
}
