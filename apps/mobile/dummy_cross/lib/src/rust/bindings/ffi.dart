// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.9.0.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../frb_generated.dart';
import '../lib.dart';
import '../models/notification.dart';
import '../models/profile.dart';
import '../services/auth.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

// These functions are ignored because they are not marked as `pub`: `map_error`

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<FfiApiClient>>
abstract class FfiApiClient implements RustOpaqueInterface {
  Future<void> deleteAccount();

  Future<Profile> deleteCoverPhoto();

  Future<void> deleteNotification({required int notificationId});

  Future<Profile> deleteProfilePicture();

  Future<Profile> deleteResume();

  Future<void> forgetPassword({required String email});

  String getAuthToken();

  Future<String> getGatewayHealth();

  Future<Profile> getLocalUserProfile();

  Future<List<Notification>> getNotifications({int? page});

  Future<LoginResponse> login({
    required String email,
    required String password,
  });

  Future<void> logout();

  Future<void> markNotificationAsRead({required int notificationId});

  factory FfiApiClient({required String baseUrl}) =>
      RustLib.instance.api.crateBindingsFfiFfiApiClientNew(baseUrl: baseUrl);

  Future<RegisterResponse> register({
    required String firstName,
    required String lastName,
    required String email,
    required String password,
  });

  Future<void> resendConfirmEmail({required String email});

  Future<void> resetPassword({
    required String token,
    required String newPassword,
  });

  void setAuthToken({required String token});

  Future<void> updateEmail({required String newEmail});

  Future<Profile> updateLocalUserProfile({required Profile profile});

  Future<void> updatePassword({
    required String oldPassword,
    required String newPassword,
  });

  Future<Profile> uploadCoverPhoto({
    required String name,
    required String mime,
    required List<int> buffer,
  });

  Future<Profile> uploadProfilePicture({
    required String name,
    required String mime,
    required List<int> buffer,
  });

  Future<Profile> uploadResume({
    required String name,
    required String mime,
    required List<int> buffer,
  });
}
