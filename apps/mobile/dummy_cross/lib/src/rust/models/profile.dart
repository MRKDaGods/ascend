// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.9.0.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../frb_generated.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

class ContactInfo {
  final int? userId;
  final String? profileUrl;
  final String? email;
  final String? phone;
  final PhoneType? phoneType;
  final String? address;
  final DateTime? birthday;
  final DateTime? createdAt;
  final DateTime? updatedAt;

  const ContactInfo({
    this.userId,
    this.profileUrl,
    this.email,
    this.phone,
    this.phoneType,
    this.address,
    this.birthday,
    this.createdAt,
    this.updatedAt,
  });

  @override
  int get hashCode =>
      userId.hashCode ^
      profileUrl.hashCode ^
      email.hashCode ^
      phone.hashCode ^
      phoneType.hashCode ^
      address.hashCode ^
      birthday.hashCode ^
      createdAt.hashCode ^
      updatedAt.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is ContactInfo &&
          runtimeType == other.runtimeType &&
          userId == other.userId &&
          profileUrl == other.profileUrl &&
          email == other.email &&
          phone == other.phone &&
          phoneType == other.phoneType &&
          address == other.address &&
          birthday == other.birthday &&
          createdAt == other.createdAt &&
          updatedAt == other.updatedAt;
}

class Course {
  final int? id;
  final int? userId;
  final String? name;
  final String? provider;
  final DateTime? completionDate;
  final DateTime? createdAt;
  final DateTime? updatedAt;

  const Course({
    this.id,
    this.userId,
    this.name,
    this.provider,
    this.completionDate,
    this.createdAt,
    this.updatedAt,
  });

  @override
  int get hashCode =>
      id.hashCode ^
      userId.hashCode ^
      name.hashCode ^
      provider.hashCode ^
      completionDate.hashCode ^
      createdAt.hashCode ^
      updatedAt.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is Course &&
          runtimeType == other.runtimeType &&
          id == other.id &&
          userId == other.userId &&
          name == other.name &&
          provider == other.provider &&
          completionDate == other.completionDate &&
          createdAt == other.createdAt &&
          updatedAt == other.updatedAt;
}

class Education {
  final int? id;
  final int? userId;
  final String? school;
  final String? degree;
  final String? fieldOfStudy;
  final DateTime? startDate;
  final String? endDate;
  final DateTime? createdAt;
  final DateTime? updatedAt;

  const Education({
    this.id,
    this.userId,
    this.school,
    this.degree,
    this.fieldOfStudy,
    this.startDate,
    this.endDate,
    this.createdAt,
    this.updatedAt,
  });

  @override
  int get hashCode =>
      id.hashCode ^
      userId.hashCode ^
      school.hashCode ^
      degree.hashCode ^
      fieldOfStudy.hashCode ^
      startDate.hashCode ^
      endDate.hashCode ^
      createdAt.hashCode ^
      updatedAt.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is Education &&
          runtimeType == other.runtimeType &&
          id == other.id &&
          userId == other.userId &&
          school == other.school &&
          degree == other.degree &&
          fieldOfStudy == other.fieldOfStudy &&
          startDate == other.startDate &&
          endDate == other.endDate &&
          createdAt == other.createdAt &&
          updatedAt == other.updatedAt;
}

class Experience {
  final int? id;
  final int? userId;
  final String? company;
  final String? position;
  final DateTime? startDate;
  final DateTime? endDate;
  final String? description;
  final DateTime? createdAt;
  final DateTime? updatedAt;

  const Experience({
    this.id,
    this.userId,
    this.company,
    this.position,
    this.startDate,
    this.endDate,
    this.description,
    this.createdAt,
    this.updatedAt,
  });

  @override
  int get hashCode =>
      id.hashCode ^
      userId.hashCode ^
      company.hashCode ^
      position.hashCode ^
      startDate.hashCode ^
      endDate.hashCode ^
      description.hashCode ^
      createdAt.hashCode ^
      updatedAt.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is Experience &&
          runtimeType == other.runtimeType &&
          id == other.id &&
          userId == other.userId &&
          company == other.company &&
          position == other.position &&
          startDate == other.startDate &&
          endDate == other.endDate &&
          description == other.description &&
          createdAt == other.createdAt &&
          updatedAt == other.updatedAt;
}

class Interest {
  final int? id;
  final String? name;

  const Interest({this.id, this.name});

  @override
  int get hashCode => id.hashCode ^ name.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is Interest &&
          runtimeType == other.runtimeType &&
          id == other.id &&
          name == other.name;
}

enum PhoneType { home, work, mobile }

class Profile {
  final int? userId;
  final String? firstName;
  final String? lastName;
  final String? resumeUrl;
  final int? resumeId;
  final String? coverPhotoUrl;
  final int? coverPhotoId;
  final String? profilePictureUrl;
  final int? profilePictureId;
  final String? industry;
  final String? location;
  final String? bio;
  final String? privacy;
  final bool? showSchool;
  final bool? showCurrentCompany;
  final String? website;
  final String? additionalName;
  final String? namePronunciation;
  final List<Skill>? skills;
  final List<Education>? education;
  final List<Experience>? experience;
  final List<Interest>? interests;
  final List<Project>? projects;
  final List<Course>? courses;
  final ContactInfo? contactInfo;
  final DateTime? createdAt;
  final DateTime? updatedAt;

  const Profile({
    this.userId,
    this.firstName,
    this.lastName,
    this.resumeUrl,
    this.resumeId,
    this.coverPhotoUrl,
    this.coverPhotoId,
    this.profilePictureUrl,
    this.profilePictureId,
    this.industry,
    this.location,
    this.bio,
    this.privacy,
    this.showSchool,
    this.showCurrentCompany,
    this.website,
    this.additionalName,
    this.namePronunciation,
    this.skills,
    this.education,
    this.experience,
    this.interests,
    this.projects,
    this.courses,
    this.contactInfo,
    this.createdAt,
    this.updatedAt,
  });

  @override
  int get hashCode =>
      userId.hashCode ^
      firstName.hashCode ^
      lastName.hashCode ^
      resumeUrl.hashCode ^
      resumeId.hashCode ^
      coverPhotoUrl.hashCode ^
      coverPhotoId.hashCode ^
      profilePictureUrl.hashCode ^
      profilePictureId.hashCode ^
      industry.hashCode ^
      location.hashCode ^
      bio.hashCode ^
      privacy.hashCode ^
      showSchool.hashCode ^
      showCurrentCompany.hashCode ^
      website.hashCode ^
      additionalName.hashCode ^
      namePronunciation.hashCode ^
      skills.hashCode ^
      education.hashCode ^
      experience.hashCode ^
      interests.hashCode ^
      projects.hashCode ^
      courses.hashCode ^
      contactInfo.hashCode ^
      createdAt.hashCode ^
      updatedAt.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is Profile &&
          runtimeType == other.runtimeType &&
          userId == other.userId &&
          firstName == other.firstName &&
          lastName == other.lastName &&
          resumeUrl == other.resumeUrl &&
          resumeId == other.resumeId &&
          coverPhotoUrl == other.coverPhotoUrl &&
          coverPhotoId == other.coverPhotoId &&
          profilePictureUrl == other.profilePictureUrl &&
          profilePictureId == other.profilePictureId &&
          industry == other.industry &&
          location == other.location &&
          bio == other.bio &&
          privacy == other.privacy &&
          showSchool == other.showSchool &&
          showCurrentCompany == other.showCurrentCompany &&
          website == other.website &&
          additionalName == other.additionalName &&
          namePronunciation == other.namePronunciation &&
          skills == other.skills &&
          education == other.education &&
          experience == other.experience &&
          interests == other.interests &&
          projects == other.projects &&
          courses == other.courses &&
          contactInfo == other.contactInfo &&
          createdAt == other.createdAt &&
          updatedAt == other.updatedAt;
}

class Project {
  final int? id;
  final int? userId;
  final String? name;
  final String? description;
  final DateTime? startDate;
  final DateTime? endDate;
  final String? url;
  final DateTime? createdAt;
  final DateTime? updatedAt;

  const Project({
    this.id,
    this.userId,
    this.name,
    this.description,
    this.startDate,
    this.endDate,
    this.url,
    this.createdAt,
    this.updatedAt,
  });

  @override
  int get hashCode =>
      id.hashCode ^
      userId.hashCode ^
      name.hashCode ^
      description.hashCode ^
      startDate.hashCode ^
      endDate.hashCode ^
      url.hashCode ^
      createdAt.hashCode ^
      updatedAt.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is Project &&
          runtimeType == other.runtimeType &&
          id == other.id &&
          userId == other.userId &&
          name == other.name &&
          description == other.description &&
          startDate == other.startDate &&
          endDate == other.endDate &&
          url == other.url &&
          createdAt == other.createdAt &&
          updatedAt == other.updatedAt;
}

class Skill {
  final int? id;
  final String? name;

  const Skill({this.id, this.name});

  @override
  int get hashCode => id.hashCode ^ name.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is Skill &&
          runtimeType == other.runtimeType &&
          id == other.id &&
          name == other.name;
}
